af97d9656703a3461d36043b79f304d2
"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _enzyme = require("enzyme");

var _codeSample = _interopRequireDefault(require("../js/code-sample"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact["default"]()
});
var reactsample = [{
  title: "test1",
  code: 'front end sample code'
}, {
  title: "test2",
  code: 'front end sample code too'
}];
var cmsample = [{
  title: "test1",
  code: 'cm sample code'
}, {
  title: "test2",
  code: 'cm sample code too'
}];
var cicdsample = [{
  title: "test1",
  code: 'cicd sample code'
}, {
  title: "test2",
  code: 'cicd sample code too'
}];
describe("CodeSample tests", function () {
  var codesample = (0, _enzyme.shallow)(_react["default"].createElement(_codeSample["default"], null));
  it("Should be a 'section' element", function () {
    codesample.instance().stateSet("frontend");
    expect(codesample.type()).toEqual('section');
  });
  it("Code type set correctly", function () {
    codesample.instance().stateSet("frontend");
    expect(codesample.instance().state.codeType).toEqual('frontend');
  });
  it("Should be a 'section' element", function () {
    codesample.instance().stateSet("cm");
    expect(codesample.type()).toEqual('section');
  });
  it("Code type set correctly", function () {
    codesample.instance().stateSet("cm");
    expect(codesample.instance().state.codeType).toEqual('cm');
  });
  it("Should be a 'section' element", function () {
    codesample.instance().stateSet("cm");
    expect(codesample.type()).toEqual('section');
  });
  it("Code type set correctly", function () {
    codesample.instance().stateSet("cicd");
    expect(codesample.instance().state.codeType).toEqual('cicd');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzLWNvZGUtc2FtcGxlLmpzIl0sIm5hbWVzIjpbImFkYXB0ZXIiLCJBZGFwdGVyIiwicmVhY3RzYW1wbGUiLCJ0aXRsZSIsImNvZGUiLCJjbXNhbXBsZSIsImNpY2RzYW1wbGUiLCJkZXNjcmliZSIsImNvZGVzYW1wbGUiLCJpdCIsImluc3RhbmNlIiwic3RhdGVTZXQiLCJleHBlY3QiLCJ0eXBlIiwidG9FcXVhbCIsInN0YXRlIiwiY29kZVR5cGUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFJQSx1QkFBVTtBQUFFQSxFQUFBQSxPQUFPLEVBQUUsSUFBSUMsOEJBQUo7QUFBWCxDQUFWO0FBTUEsSUFBTUMsV0FBVyxHQUFHLENBRUE7QUFFSUMsRUFBQUEsS0FBSyxFQUFFLE9BRlg7QUFHSUMsRUFBQUEsSUFBSSxFQUFHO0FBSFgsQ0FGQSxFQVNBO0FBRUlELEVBQUFBLEtBQUssRUFBRSxPQUZYO0FBR0lDLEVBQUFBLElBQUksRUFBRztBQUhYLENBVEEsQ0FBcEI7QUFrQkEsSUFBTUMsUUFBUSxHQUFHLENBRWI7QUFFSUYsRUFBQUEsS0FBSyxFQUFFLE9BRlg7QUFHSUMsRUFBQUEsSUFBSSxFQUFHO0FBSFgsQ0FGYSxFQVNiO0FBRUlELEVBQUFBLEtBQUssRUFBRSxPQUZYO0FBR0lDLEVBQUFBLElBQUksRUFBRztBQUhYLENBVGEsQ0FBakI7QUFtQkEsSUFBTUUsVUFBVSxHQUFHLENBRWY7QUFFSUgsRUFBQUEsS0FBSyxFQUFFLE9BRlg7QUFHSUMsRUFBQUEsSUFBSSxFQUFHO0FBSFgsQ0FGZSxFQVNmO0FBRUlELEVBQUFBLEtBQUssRUFBRSxPQUZYO0FBR0lDLEVBQUFBLElBQUksRUFBRztBQUhYLENBVGUsQ0FBbkI7QUFtQkFHLFFBQVEsQ0FBQyxrQkFBRCxFQUFxQixZQUFNO0FBSy9CLE1BQU1DLFVBQVUsR0FBRyxxQkFBUSxnQ0FBQyxzQkFBRCxPQUFSLENBQW5CO0FBTUFDLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFNO0FBRXRDRCxJQUFBQSxVQUFVLENBQUNFLFFBQVgsR0FBc0JDLFFBQXRCLENBQStCLFVBQS9CO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0osVUFBVSxDQUFDSyxJQUFYLEVBQUQsQ0FBTixDQUEwQkMsT0FBMUIsQ0FBa0MsU0FBbEM7QUFHSCxHQU5DLENBQUY7QUFPQUwsRUFBQUEsRUFBRSxDQUFDLHlCQUFELEVBQTRCLFlBQU07QUFHaENELElBQUFBLFVBQVUsQ0FBQ0UsUUFBWCxHQUFzQkMsUUFBdEIsQ0FBK0IsVUFBL0I7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSixVQUFVLENBQUNFLFFBQVgsR0FBc0JLLEtBQXRCLENBQTRCQyxRQUE3QixDQUFOLENBQTZDRixPQUE3QyxDQUFxRCxVQUFyRDtBQUdILEdBUEMsQ0FBRjtBQVdBTCxFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBTTtBQUV0Q0QsSUFBQUEsVUFBVSxDQUFDRSxRQUFYLEdBQXNCQyxRQUF0QixDQUErQixJQUEvQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNKLFVBQVUsQ0FBQ0ssSUFBWCxFQUFELENBQU4sQ0FBMEJDLE9BQTFCLENBQWtDLFNBQWxDO0FBR0gsR0FOQyxDQUFGO0FBUUFMLEVBQUFBLEVBQUUsQ0FBQyx5QkFBRCxFQUE0QixZQUFNO0FBR2hDRCxJQUFBQSxVQUFVLENBQUNFLFFBQVgsR0FBc0JDLFFBQXRCLENBQStCLElBQS9CO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0osVUFBVSxDQUFDRSxRQUFYLEdBQXNCSyxLQUF0QixDQUE0QkMsUUFBN0IsQ0FBTixDQUE2Q0YsT0FBN0MsQ0FBcUQsSUFBckQ7QUFHSCxHQVBDLENBQUY7QUFTQUwsRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQU07QUFFdENELElBQUFBLFVBQVUsQ0FBQ0UsUUFBWCxHQUFzQkMsUUFBdEIsQ0FBK0IsSUFBL0I7QUFDQUMsSUFBQUEsTUFBTSxDQUFDSixVQUFVLENBQUNLLElBQVgsRUFBRCxDQUFOLENBQTBCQyxPQUExQixDQUFrQyxTQUFsQztBQUdILEdBTkMsQ0FBRjtBQVFBTCxFQUFBQSxFQUFFLENBQUMseUJBQUQsRUFBNEIsWUFBTTtBQUdoQ0QsSUFBQUEsVUFBVSxDQUFDRSxRQUFYLEdBQXNCQyxRQUF0QixDQUErQixNQUEvQjtBQUNBQyxJQUFBQSxNQUFNLENBQUNKLFVBQVUsQ0FBQ0UsUUFBWCxHQUFzQkssS0FBdEIsQ0FBNEJDLFFBQTdCLENBQU4sQ0FBNkNGLE9BQTdDLENBQXFELE1BQXJEO0FBR0gsR0FQQyxDQUFGO0FBV0gsQ0FqRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XG5pbXBvcnQgeyBzaGFsbG93LCBtb3VudCwgcmVuZGVyIH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCB7IGNvbmZpZ3VyZSB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgQ29kZVNhbXBsZSAgZnJvbSAnLi4vanMvY29kZS1zYW1wbGUnO1xuXG5cblxuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KTtcblxuXG5cblxuXG5jb25zdCByZWFjdHNhbXBsZSA9IFtcblxuICAgICAgICAgICAgICAgICAgICB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcInRlc3QxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAgJ2Zyb250IGVuZCBzYW1wbGUgY29kZSdcblxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwidGVzdDJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6ICAnZnJvbnQgZW5kIHNhbXBsZSBjb2RlIHRvbydcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbl1cblxuY29uc3QgY21zYW1wbGUgPSBbXG5cbiAgICB7XG5cbiAgICAgICAgdGl0bGU6IFwidGVzdDFcIixcbiAgICAgICAgY29kZTogICdjbSBzYW1wbGUgY29kZSdcblxuICAgIH0sXG5cbiAgICB7XG5cbiAgICAgICAgdGl0bGU6IFwidGVzdDJcIixcbiAgICAgICAgY29kZTogICdjbSBzYW1wbGUgY29kZSB0b28nXG5cbiAgICB9XG5cbl1cblxuXG5jb25zdCBjaWNkc2FtcGxlID0gW1xuXG4gICAge1xuXG4gICAgICAgIHRpdGxlOiBcInRlc3QxXCIsXG4gICAgICAgIGNvZGU6ICAnY2ljZCBzYW1wbGUgY29kZSdcblxuICAgIH0sXG5cbiAgICB7XG5cbiAgICAgICAgdGl0bGU6IFwidGVzdDJcIixcbiAgICAgICAgY29kZTogICdjaWNkIHNhbXBsZSBjb2RlIHRvbydcblxuICAgIH1cblxuXVxuXG5cbmRlc2NyaWJlKFwiQ29kZVNhbXBsZSB0ZXN0c1wiLCAoKSA9PiB7IFxuXG4gICAgXG4gXG4gICAgXG4gICAgY29uc3QgY29kZXNhbXBsZSA9IHNoYWxsb3coPENvZGVTYW1wbGUgLz4pO1xuICAgIFxuXG5cbiAgIFxuXG4gICAgaXQoXCJTaG91bGQgYmUgYSAnc2VjdGlvbicgZWxlbWVudFwiLCAoKSA9PiB7XG4gICAgICAgXG4gICAgICAgIGNvZGVzYW1wbGUuaW5zdGFuY2UoKS5zdGF0ZVNldChcImZyb250ZW5kXCIpO1xuICAgICAgICBleHBlY3QoY29kZXNhbXBsZS50eXBlKCkpLnRvRXF1YWwoJ3NlY3Rpb24nKTtcbiAgICAgICAgXG5cbiAgICB9KTtcbiAgICBpdChcIkNvZGUgdHlwZSBzZXQgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICAgICBcbiAgICAgICBcbiAgICAgICAgY29kZXNhbXBsZS5pbnN0YW5jZSgpLnN0YXRlU2V0KFwiZnJvbnRlbmRcIik7XG4gICAgICAgIGV4cGVjdChjb2Rlc2FtcGxlLmluc3RhbmNlKCkuc3RhdGUuY29kZVR5cGUpLnRvRXF1YWwoJ2Zyb250ZW5kJyk7XG4gICAgICAgIFxuXG4gICAgfSk7XG4gICAgXG5cbiAgICBcbiAgICBpdChcIlNob3VsZCBiZSBhICdzZWN0aW9uJyBlbGVtZW50XCIsICgpID0+IHtcbiAgICAgICBcbiAgICAgICAgY29kZXNhbXBsZS5pbnN0YW5jZSgpLnN0YXRlU2V0KFwiY21cIik7XG4gICAgICAgIGV4cGVjdChjb2Rlc2FtcGxlLnR5cGUoKSkudG9FcXVhbCgnc2VjdGlvbicpO1xuICAgICAgICBcblxuICAgIH0pO1xuXG4gICAgaXQoXCJDb2RlIHR5cGUgc2V0IGNvcnJlY3RseVwiLCAoKSA9PiB7XG4gICAgICAgXG4gICAgICAgXG4gICAgICAgIGNvZGVzYW1wbGUuaW5zdGFuY2UoKS5zdGF0ZVNldChcImNtXCIpO1xuICAgICAgICBleHBlY3QoY29kZXNhbXBsZS5pbnN0YW5jZSgpLnN0YXRlLmNvZGVUeXBlKS50b0VxdWFsKCdjbScpO1xuICAgICAgICBcblxuICAgIH0pO1xuXG4gICAgaXQoXCJTaG91bGQgYmUgYSAnc2VjdGlvbicgZWxlbWVudFwiLCAoKSA9PiB7XG4gICAgICAgXG4gICAgICAgIGNvZGVzYW1wbGUuaW5zdGFuY2UoKS5zdGF0ZVNldChcImNtXCIpO1xuICAgICAgICBleHBlY3QoY29kZXNhbXBsZS50eXBlKCkpLnRvRXF1YWwoJ3NlY3Rpb24nKTtcbiAgICAgICAgXG5cbiAgICB9KTtcbiAgICBcbiAgICBpdChcIkNvZGUgdHlwZSBzZXQgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICAgICBcbiAgICAgICBcbiAgICAgICAgY29kZXNhbXBsZS5pbnN0YW5jZSgpLnN0YXRlU2V0KFwiY2ljZFwiKTtcbiAgICAgICAgZXhwZWN0KGNvZGVzYW1wbGUuaW5zdGFuY2UoKS5zdGF0ZS5jb2RlVHlwZSkudG9FcXVhbCgnY2ljZCcpO1xuICAgICAgICBcblxuICAgIH0pO1xuICAgIFxuXG5cbn0pO1xuIl19