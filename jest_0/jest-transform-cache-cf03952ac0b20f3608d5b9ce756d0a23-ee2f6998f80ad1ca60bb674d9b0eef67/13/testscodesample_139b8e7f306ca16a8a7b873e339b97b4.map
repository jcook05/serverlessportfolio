{"version":3,"sources":["tests-code-sample.js"],"names":["adapter","Adapter","reactsample","title","code","cmsample","cicdsample","describe","codesample","it","instance","stateSet","expect","type","toEqual","state","codeType"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;;;AAIA,uBAAU;AAAEA,EAAAA,OAAO,EAAE,IAAIC,8BAAJ;AAAX,CAAV;AAMA,IAAMC,WAAW,GAAG,CAEA;AAEIC,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CAFA,EASA;AAEID,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CATA,CAApB;AAkBA,IAAMC,QAAQ,GAAG,CAEb;AAEIF,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CAFa,EASb;AAEID,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CATa,CAAjB;AAmBA,IAAME,UAAU,GAAG,CAEf;AAEIH,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CAFe,EASf;AAEID,EAAAA,KAAK,EAAE,OAFX;AAGIC,EAAAA,IAAI,EAAG;AAHX,CATe,CAAnB;AAmBAG,QAAQ,CAAC,kBAAD,EAAqB,YAAM;AAK/B,MAAMC,UAAU,GAAG,qBAAQ,gCAAC,sBAAD,OAAR,CAAnB;AAMAC,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AAEtCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,UAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACK,IAAX,EAAD,CAAN,CAA0BC,OAA1B,CAAkC,SAAlC;AAGH,GANC,CAAF;AAOAL,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAGhCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,UAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACE,QAAX,GAAsBK,KAAtB,CAA4BC,QAA7B,CAAN,CAA6CF,OAA7C,CAAqD,UAArD;AAGH,GAPC,CAAF;AAWAL,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AAEtCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,IAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACK,IAAX,EAAD,CAAN,CAA0BC,OAA1B,CAAkC,SAAlC;AAGH,GANC,CAAF;AAQAL,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAGhCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,IAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACE,QAAX,GAAsBK,KAAtB,CAA4BC,QAA7B,CAAN,CAA6CF,OAA7C,CAAqD,IAArD;AAGH,GAPC,CAAF;AASAL,EAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AAEtCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,IAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACK,IAAX,EAAD,CAAN,CAA0BC,OAA1B,CAAkC,SAAlC;AAGH,GANC,CAAF;AAQAL,EAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAM;AAGhCD,IAAAA,UAAU,CAACE,QAAX,GAAsBC,QAAtB,CAA+B,MAA/B;AACAC,IAAAA,MAAM,CAACJ,UAAU,CAACE,QAAX,GAAsBK,KAAtB,CAA4BC,QAA7B,CAAN,CAA6CF,OAA7C,CAAqD,MAArD;AAGH,GAPC,CAAF;AAWH,CAjEO,CAAR","sourcesContent":["import React from 'react';\nimport Adapter from 'enzyme-adapter-react-16';\nimport { shallow, mount, render } from 'enzyme';\nimport { configure } from 'enzyme';\nimport CodeSample  from '../js/code-sample';\n\n\n\nconfigure({ adapter: new Adapter() });\n\n\n\n\n\nconst reactsample = [\n\n                    {\n\n                        title: \"test1\",\n                        code:  'front end sample code'\n\n                    },\n\n                    {\n\n                        title: \"test2\",\n                        code:  'front end sample code too'\n\n                    }\n\n]\n\nconst cmsample = [\n\n    {\n\n        title: \"test1\",\n        code:  'cm sample code'\n\n    },\n\n    {\n\n        title: \"test2\",\n        code:  'cm sample code too'\n\n    }\n\n]\n\n\nconst cicdsample = [\n\n    {\n\n        title: \"test1\",\n        code:  'cicd sample code'\n\n    },\n\n    {\n\n        title: \"test2\",\n        code:  'cicd sample code too'\n\n    }\n\n]\n\n\ndescribe(\"CodeSample tests\", () => { \n\n    \n \n    \n    const codesample = shallow(<CodeSample />);\n    \n\n\n   \n\n    it(\"Should be a 'section' element\", () => {\n       \n        codesample.instance().stateSet(\"frontend\");\n        expect(codesample.type()).toEqual('section');\n        \n\n    });\n    it(\"Code type set correctly\", () => {\n       \n       \n        codesample.instance().stateSet(\"frontend\");\n        expect(codesample.instance().state.codeType).toEqual('frontend');\n        \n\n    });\n    \n\n    \n    it(\"Should be a 'section' element\", () => {\n       \n        codesample.instance().stateSet(\"cm\");\n        expect(codesample.type()).toEqual('section');\n        \n\n    });\n\n    it(\"Code type set correctly\", () => {\n       \n       \n        codesample.instance().stateSet(\"cm\");\n        expect(codesample.instance().state.codeType).toEqual('cm');\n        \n\n    });\n\n    it(\"Should be a 'section' element\", () => {\n       \n        codesample.instance().stateSet(\"cm\");\n        expect(codesample.type()).toEqual('section');\n        \n\n    });\n    \n    it(\"Code type set correctly\", () => {\n       \n       \n        codesample.instance().stateSet(\"cicd\");\n        expect(codesample.instance().state.codeType).toEqual('cicd');\n        \n\n    });\n    \n\n\n});\n"]}