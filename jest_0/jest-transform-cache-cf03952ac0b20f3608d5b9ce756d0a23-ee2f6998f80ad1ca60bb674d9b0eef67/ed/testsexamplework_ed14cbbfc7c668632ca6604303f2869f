73126648e55c1ea47d3bd9d08d4b7463
"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));

var _enzyme = require("enzyme");

var _exampleWork = _interopRequireWildcard(require("../js/example-work"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

(0, _enzyme.configure)({
  adapter: new _enzymeAdapterReact["default"]()
});
var myWork = [{
  title: "Configuration Management",
  image: {
    desc: "Configuration Management examples",
    src: "images/IMG_0111.JPG"
  }
}, {
  title: "CICD",
  image: {
    desc: "Continuous Integration Continuous Deployment examples",
    src: "images/IMG_0117.JPG"
  }
}, {
  title: "Front End",
  image: {
    desc: "Front End examples",
    src: "images/marmot.JPG"
  }
}]; // ensure versions of adapter match your react-dom and react-test-renderer.   enzyme-adapter-react-16 for version 16 of react-dom and test-renderer.

describe("ExampleWork tests", function () {
  var ework = (0, _enzyme.shallow)(_react["default"].createElement(_exampleWork["default"], {
    work: myWork
  }));
  it("Should be a 'span' element", function () {
    //console.log(ework.debug());
    expect(ework.type()).toEqual('span');
  });
  it("Component Children count = myWork length", function () {
    //console.log(ework.debug());
    expect(ework.find("ExampleWorkBubble").length).toEqual(myWork.length);
  });
  it("Should allow modal to open", function () {
    ework.instance().openModal();
    expect(ework.instance().state.modalOpen).toBe(true);
  });
  it("Should allow modal to close", function () {
    ework.instance().closeModal();
    expect(ework.instance().state.modalOpen).toBe(false);
  });
});
describe("ExampleWorkBubble tests", function () {
  var mockOpenModalFn = jest.fn();
  var workbubble = (0, _enzyme.shallow)(_react["default"].createElement(_exampleWork.ExampleWorkBubble, {
    example: myWork[1],
    openModal: mockOpenModalFn
  }));
  var images = workbubble.find("img");
  it("Should contain 1 image", function () {
    expect(images.length).toEqual(1);
  });
  it("Image source set correctly", function () {
    //console.log(ework.debug());
    // This is deprecated as node is now hidden by Enzyme
    //expect(images.node.props.src).toEqual(myWork[1].image.src);
    expect(images.get(0).props.src).toEqual(myWork[1].image.src);
  });
  it("Should call openModal on click", function () {
    workbubble.find(".section__exampleWrapper").simulate('click');
    expect(mockOpenModalFn).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RzLWV4YW1wbGUtd29yay5qcyJdLCJuYW1lcyI6WyJhZGFwdGVyIiwiQWRhcHRlciIsIm15V29yayIsInRpdGxlIiwiaW1hZ2UiLCJkZXNjIiwic3JjIiwiZGVzY3JpYmUiLCJld29yayIsIml0IiwiZXhwZWN0IiwidHlwZSIsInRvRXF1YWwiLCJmaW5kIiwibGVuZ3RoIiwiaW5zdGFuY2UiLCJvcGVuTW9kYWwiLCJzdGF0ZSIsIm1vZGFsT3BlbiIsInRvQmUiLCJjbG9zZU1vZGFsIiwibW9ja09wZW5Nb2RhbEZuIiwiamVzdCIsImZuIiwid29ya2J1YmJsZSIsImltYWdlcyIsImdldCIsInByb3BzIiwic2ltdWxhdGUiLCJ0b0hhdmVCZWVuQ2FsbGVkIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7QUFJQSx1QkFBVTtBQUFFQSxFQUFBQSxPQUFPLEVBQUUsSUFBSUMsOEJBQUo7QUFBWCxDQUFWO0FBRUEsSUFBTUMsTUFBTSxHQUFHLENBQUU7QUFDYkMsRUFBQUEsS0FBSyxFQUFFLDBCQURNO0FBRWJDLEVBQUFBLEtBQUssRUFBRTtBQUNIQyxJQUFBQSxJQUFJLEVBQUUsbUNBREg7QUFFSEMsSUFBQUEsR0FBRyxFQUFFO0FBRkY7QUFGTSxDQUFGLEVBUWY7QUFDQUgsRUFBQUEsS0FBSyxFQUFFLE1BRFA7QUFFQUMsRUFBQUEsS0FBSyxFQUFFO0FBQ0hDLElBQUFBLElBQUksRUFBRSx1REFESDtBQUVIQyxJQUFBQSxHQUFHLEVBQUU7QUFGRjtBQUZQLENBUmUsRUFnQmY7QUFDQUgsRUFBQUEsS0FBSyxFQUFFLFdBRFA7QUFFQUMsRUFBQUEsS0FBSyxFQUFFO0FBQ0hDLElBQUFBLElBQUksRUFBRSxvQkFESDtBQUVIQyxJQUFBQSxHQUFHLEVBQUU7QUFGRjtBQUZQLENBaEJlLENBQWYsQyxDQTZCQTs7QUFDQUMsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQU07QUFHaEMsTUFBTUMsS0FBSyxHQUFHLHFCQUFRLGdDQUFDLHVCQUFEO0FBQWEsSUFBQSxJQUFJLEVBQUVOO0FBQW5CLElBQVIsQ0FBZDtBQUVBTyxFQUFBQSxFQUFFLENBQUMsNEJBQUQsRUFBK0IsWUFBTTtBQUVuQztBQUNBQyxJQUFBQSxNQUFNLENBQUNGLEtBQUssQ0FBQ0csSUFBTixFQUFELENBQU4sQ0FBcUJDLE9BQXJCLENBQTZCLE1BQTdCO0FBR0gsR0FOQyxDQUFGO0FBUUFILEVBQUFBLEVBQUUsQ0FBQywwQ0FBRCxFQUE2QyxZQUFNO0FBRWpEO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDSyxJQUFOLENBQVcsbUJBQVgsRUFBZ0NDLE1BQWpDLENBQU4sQ0FBK0NGLE9BQS9DLENBQXVEVixNQUFNLENBQUNZLE1BQTlEO0FBR0gsR0FOQyxDQUFGO0FBUUFMLEVBQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQixZQUFNO0FBRW5DRCxJQUFBQSxLQUFLLENBQUNPLFFBQU4sR0FBaUJDLFNBQWpCO0FBRUFOLElBQUFBLE1BQU0sQ0FBQ0YsS0FBSyxDQUFDTyxRQUFOLEdBQWlCRSxLQUFqQixDQUF1QkMsU0FBeEIsQ0FBTixDQUF5Q0MsSUFBekMsQ0FBOEMsSUFBOUM7QUFHSCxHQVBDLENBQUY7QUFTQVYsRUFBQUEsRUFBRSxDQUFDLDZCQUFELEVBQWdDLFlBQU07QUFFcENELElBQUFBLEtBQUssQ0FBQ08sUUFBTixHQUFpQkssVUFBakI7QUFFQVYsSUFBQUEsTUFBTSxDQUFDRixLQUFLLENBQUNPLFFBQU4sR0FBaUJFLEtBQWpCLENBQXVCQyxTQUF4QixDQUFOLENBQXlDQyxJQUF6QyxDQUE4QyxLQUE5QztBQUdILEdBUEMsQ0FBRjtBQVNILENBdkNPLENBQVI7QUF5Q0FaLFFBQVEsQ0FBQyx5QkFBRCxFQUE0QixZQUFNO0FBRXRDLE1BQUljLGVBQWUsR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQXRCO0FBRUEsTUFBSUMsVUFBVSxHQUFHLHFCQUFRLGdDQUFDLDhCQUFEO0FBQW1CLElBQUEsT0FBTyxFQUFFdEIsTUFBTSxDQUFDLENBQUQsQ0FBbEM7QUFBdUMsSUFBQSxTQUFTLEVBQUVtQjtBQUFsRCxJQUFSLENBQWpCO0FBQ0EsTUFBSUksTUFBTSxHQUFHRCxVQUFVLENBQUNYLElBQVgsQ0FBZ0IsS0FBaEIsQ0FBYjtBQUVBSixFQUFBQSxFQUFFLENBQUMsd0JBQUQsRUFBMkIsWUFBTTtBQUcvQkMsSUFBQUEsTUFBTSxDQUFDZSxNQUFNLENBQUNYLE1BQVIsQ0FBTixDQUFzQkYsT0FBdEIsQ0FBOEIsQ0FBOUI7QUFHSCxHQU5DLENBQUY7QUFRQUgsRUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLFlBQU07QUFFbkM7QUFDQTtBQUNBO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQ2UsTUFBTSxDQUFDQyxHQUFQLENBQVcsQ0FBWCxFQUFjQyxLQUFkLENBQW9CckIsR0FBckIsQ0FBTixDQUFnQ00sT0FBaEMsQ0FBd0NWLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVUUsS0FBVixDQUFnQkUsR0FBeEQ7QUFHSCxHQVJDLENBQUY7QUFVQUcsRUFBQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQU07QUFHdkNlLElBQUFBLFVBQVUsQ0FBQ1gsSUFBWCxDQUFnQiwwQkFBaEIsRUFBNENlLFFBQTVDLENBQXFELE9BQXJEO0FBRUFsQixJQUFBQSxNQUFNLENBQUNXLGVBQUQsQ0FBTixDQUF3QlEsZ0JBQXhCO0FBR0gsR0FSQyxDQUFGO0FBV0gsQ0FwQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XG5pbXBvcnQgeyBzaGFsbG93LCBtb3VudCwgcmVuZGVyIH0gZnJvbSAnZW56eW1lJztcbmltcG9ydCB7IGNvbmZpZ3VyZSB9IGZyb20gJ2VuenltZSc7XG5pbXBvcnQgRXhhbXBsZVdvcmssIHsgRXhhbXBsZVdvcmtCdWJibGV9IGZyb20gJy4uL2pzL2V4YW1wbGUtd29yayc7XG5cblxuXG5jb25maWd1cmUoeyBhZGFwdGVyOiBuZXcgQWRhcHRlcigpIH0pO1xuXG5jb25zdCBteVdvcmsgPSBbIHtcbiAgICB0aXRsZTogXCJDb25maWd1cmF0aW9uIE1hbmFnZW1lbnRcIixcbiAgICBpbWFnZToge1xuICAgICAgICBkZXNjOiBcIkNvbmZpZ3VyYXRpb24gTWFuYWdlbWVudCBleGFtcGxlc1wiLCBcbiAgICAgICAgc3JjOiBcImltYWdlcy9JTUdfMDExMS5KUEdcIlxuICAgICAgICBcbiAgIH0gXG59LFxue1xudGl0bGU6IFwiQ0lDRFwiLFxuaW1hZ2U6IHtcbiAgICBkZXNjOiBcIkNvbnRpbnVvdXMgSW50ZWdyYXRpb24gQ29udGludW91cyBEZXBsb3ltZW50IGV4YW1wbGVzXCIsIFxuICAgIHNyYzogXCJpbWFnZXMvSU1HXzAxMTcuSlBHXCJcbiAgIFxufSBcbn0sXG57XG50aXRsZTogXCJGcm9udCBFbmRcIixcbmltYWdlOiB7XG4gICAgZGVzYzogXCJGcm9udCBFbmQgZXhhbXBsZXNcIiwgXG4gICAgc3JjOiBcImltYWdlcy9tYXJtb3QuSlBHXCJcbiAgIFxufSBcbn1cblxuXG5cbl07XG5cbi8vIGVuc3VyZSB2ZXJzaW9ucyBvZiBhZGFwdGVyIG1hdGNoIHlvdXIgcmVhY3QtZG9tIGFuZCByZWFjdC10ZXN0LXJlbmRlcmVyLiAgIGVuenltZS1hZGFwdGVyLXJlYWN0LTE2IGZvciB2ZXJzaW9uIDE2IG9mIHJlYWN0LWRvbSBhbmQgdGVzdC1yZW5kZXJlci5cbmRlc2NyaWJlKFwiRXhhbXBsZVdvcmsgdGVzdHNcIiwgKCkgPT4geyBcblxuXG4gICAgY29uc3QgZXdvcmsgPSBzaGFsbG93KDxFeGFtcGxlV29yayB3b3JrPXtteVdvcmt9IC8+KTtcblxuICAgIGl0KFwiU2hvdWxkIGJlIGEgJ3NwYW4nIGVsZW1lbnRcIiwgKCkgPT4ge1xuICAgICAgIFxuICAgICAgICAvL2NvbnNvbGUubG9nKGV3b3JrLmRlYnVnKCkpO1xuICAgICAgICBleHBlY3QoZXdvcmsudHlwZSgpKS50b0VxdWFsKCdzcGFuJyk7XG4gICAgICAgIFxuXG4gICAgfSk7XG5cbiAgICBpdChcIkNvbXBvbmVudCBDaGlsZHJlbiBjb3VudCA9IG15V29yayBsZW5ndGhcIiwgKCkgPT4ge1xuICAgICAgIFxuICAgICAgICAvL2NvbnNvbGUubG9nKGV3b3JrLmRlYnVnKCkpO1xuICAgICAgICBleHBlY3QoZXdvcmsuZmluZChcIkV4YW1wbGVXb3JrQnViYmxlXCIpLmxlbmd0aCkudG9FcXVhbChteVdvcmsubGVuZ3RoKTtcbiAgICAgICAgXG5cbiAgICB9KTtcblxuICAgIGl0KFwiU2hvdWxkIGFsbG93IG1vZGFsIHRvIG9wZW5cIiwgKCkgPT4ge1xuICAgICAgIFxuICAgICAgICBld29yay5pbnN0YW5jZSgpLm9wZW5Nb2RhbCgpO1xuXG4gICAgICAgIGV4cGVjdChld29yay5pbnN0YW5jZSgpLnN0YXRlLm1vZGFsT3BlbikudG9CZSh0cnVlKTtcbiAgICAgICAgXG5cbiAgICB9KTtcblxuICAgIGl0KFwiU2hvdWxkIGFsbG93IG1vZGFsIHRvIGNsb3NlXCIsICgpID0+IHtcbiAgICAgICBcbiAgICAgICAgZXdvcmsuaW5zdGFuY2UoKS5jbG9zZU1vZGFsKCk7XG5cbiAgICAgICAgZXhwZWN0KGV3b3JrLmluc3RhbmNlKCkuc3RhdGUubW9kYWxPcGVuKS50b0JlKGZhbHNlKTtcbiAgICAgICAgXG5cbiAgICB9KTtcblxufSk7XG5cbmRlc2NyaWJlKFwiRXhhbXBsZVdvcmtCdWJibGUgdGVzdHNcIiwgKCkgPT4geyBcblxuICAgIGxldCBtb2NrT3Blbk1vZGFsRm4gPSBqZXN0LmZuKCk7XG5cbiAgICBsZXQgd29ya2J1YmJsZSA9IHNoYWxsb3coPEV4YW1wbGVXb3JrQnViYmxlIGV4YW1wbGU9e215V29ya1sxXX0gb3Blbk1vZGFsPXttb2NrT3Blbk1vZGFsRm59Lz4pO1xuICAgIGxldCBpbWFnZXMgPSB3b3JrYnViYmxlLmZpbmQoXCJpbWdcIik7XG5cbiAgICBpdChcIlNob3VsZCBjb250YWluIDEgaW1hZ2VcIiwgKCkgPT4ge1xuICAgICAgIFxuICAgICAgICBcbiAgICAgICAgZXhwZWN0KGltYWdlcy5sZW5ndGgpLnRvRXF1YWwoMSk7XG4gICAgICAgIFxuXG4gICAgfSk7XG5cbiAgICBpdChcIkltYWdlIHNvdXJjZSBzZXQgY29ycmVjdGx5XCIsICgpID0+IHtcbiAgICAgICBcbiAgICAgICAgLy9jb25zb2xlLmxvZyhld29yay5kZWJ1ZygpKTtcbiAgICAgICAgLy8gVGhpcyBpcyBkZXByZWNhdGVkIGFzIG5vZGUgaXMgbm93IGhpZGRlbiBieSBFbnp5bWVcbiAgICAgICAgLy9leHBlY3QoaW1hZ2VzLm5vZGUucHJvcHMuc3JjKS50b0VxdWFsKG15V29ya1sxXS5pbWFnZS5zcmMpO1xuICAgICAgICBleHBlY3QoaW1hZ2VzLmdldCgwKS5wcm9wcy5zcmMpLnRvRXF1YWwobXlXb3JrWzFdLmltYWdlLnNyYyk7XG4gICAgICAgIFxuXG4gICAgfSk7XG5cbiAgICBpdChcIlNob3VsZCBjYWxsIG9wZW5Nb2RhbCBvbiBjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgXG5cbiAgICAgICAgd29ya2J1YmJsZS5maW5kKFwiLnNlY3Rpb25fX2V4YW1wbGVXcmFwcGVyXCIpLnNpbXVsYXRlKCdjbGljaycpO1xuICAgICAgICBcbiAgICAgICAgZXhwZWN0KG1vY2tPcGVuTW9kYWxGbikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBcblxuICAgIH0pO1xuXG5cbn0pO1xuIl19