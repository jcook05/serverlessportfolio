{"version":3,"sources":["tests-example-work.js"],"names":["adapter","Adapter","myWork","title","image","desc","src","describe","ework","it","expect","type","toEqual","find","length","instance","openModal","state","modalOpen","toBe","closeModal","mockOpenModalFn","jest","fn","workbubble","images","get","props","simulate","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Adapter from 'enzyme-adapter-react-16';\nimport { shallow, mount, render } from 'enzyme';\nimport { configure } from 'enzyme';\nimport ExampleWork, { ExampleWorkBubble} from '../js/example-work';\n\n\n\nconfigure({ adapter: new Adapter() });\n\nconst myWork = [ {\n    title: \"Configuration Management\",\n    image: {\n        desc: \"Configuration Management examples\", \n        src: \"images/IMG_0111.JPG\"\n        \n   } \n},\n{\ntitle: \"CICD\",\nimage: {\n    desc: \"Continuous Integration Continuous Deployment examples\", \n    src: \"images/IMG_0117.JPG\"\n   \n} \n},\n{\ntitle: \"Front End\",\nimage: {\n    desc: \"Front End examples\", \n    src: \"images/marmot.JPG\"\n   \n} \n}\n\n\n\n];\n\n// ensure versions of adapter match your react-dom and react-test-renderer.   enzyme-adapter-react-16 for version 16 of react-dom and test-renderer.\ndescribe(\"ExampleWork tests\", () => { \n\n\n    const ework = shallow(<ExampleWork work={myWork} />);\n\n    it(\"Should be a 'span' element\", () => {\n       \n        //console.log(ework.debug());\n        expect(ework.type()).toEqual('span');\n        \n\n    });\n\n    it(\"Component Children count = myWork length\", () => {\n       \n        //console.log(ework.debug());\n        expect(ework.find(\"ExampleWorkBubble\").length).toEqual(myWork.length);\n        \n\n    });\n\n    it(\"Should allow modal to open\", () => {\n       \n        ework.instance().openModal();\n\n        expect(ework.instance().state.modalOpen).toBe(true);\n        \n\n    });\n\n    it(\"Should allow modal to close\", () => {\n       \n        ework.instance().closeModal();\n\n        expect(ework.instance().state.modalOpen).toBe(false);\n        \n\n    });\n\n});\n\ndescribe(\"ExampleWorkBubble tests\", () => { \n\n    let mockOpenModalFn = jest.fn();\n\n    let workbubble = shallow(<ExampleWorkBubble example={myWork[1]} openModal={mockOpenModalFn}/>);\n    let images = workbubble.find(\"img\");\n\n    it(\"Should contain 1 image\", () => {\n       \n        \n        expect(images.length).toEqual(1);\n        \n\n    });\n\n    it(\"Image source set correctly\", () => {\n       \n        //console.log(ework.debug());\n        // This is deprecated as node is now hidden by Enzyme\n        //expect(images.node.props.src).toEqual(myWork[1].image.src);\n        expect(images.get(0).props.src).toEqual(myWork[1].image.src);\n        \n\n    });\n\n    it(\"Should call openModal on click\", () => {\n       \n\n        workbubble.find(\".section__exampleWrapper\").simulate('click');\n        \n        expect(mockOpenModalFn).toHaveBeenCalled();\n        \n\n    });\n\n\n});\n"]}