bad5c31215cea21ae907a487e2e91ab2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var reactsample = [{
  title: "React Class",
  code: "import React from 'react';\n\n\n       class ExampleWorkModal extends React.Component {\n       \n           render ()  {\n               \n               let example = this.props.example;\n               let modalClass = this.props.open ? 'modal--open' : 'modal--closed'\n       \n               return (\n       \n             <div className={\"background--skyBlue \" + modalClass}>\n             <span className=\"color--cloud modal__closeButton\" onClick={ (evt) => { this.props.closeModal(evt) } }>\n               <i className=\"fa fa-window-close-o\"></i>\n             </span>\n             <img alt={ example.image.desc }\n                  className=\"modal__image\"\n                  src={ example.image.src }/>\n             <div className=\"color--cloud modal__text\">\n               <h2 className=\"modal__title\">\n                 { example.title }\n               </h2>\n               <a className=\"color--skyBlue modal__link\"\n                  href={ example.href }>\n                 Check it out\n               </a>\n               <br></br> <br></br>\n               <a className=\"color--skyBlue modal__link\"\n                  href={ example.github }>\n                 Github Examples\n               </a>\n               <p  className=\"modal__description\">\n                  { example.desc }\n               </p>\n             </div>\n           </div>\n               )\n           };\n       \n       };\n       \n       export default ExampleWorkModal;"
}, {
  title: "React Class 2",
  code: "  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import ExampleWork from './example-work';\n  import CodeSample from './code-sample';\n   \n  \n  \n  const MyWork = [\n  \n     {\n          title: \"Configuration Management\",\n          key: \"cm\",\n          desc: \"Configuration Management examples\",\n          href: \"../cm.html\",\n          github: \"https://github.com/jcook05/ansible\",\n          image: {\n              desc: \"Configuration Management examples\", \n              src: \"images/IMG_0111.JPG\"\n              \n         } \n    },\n    {\n      title: \"CICD\",\n      key: \"cicd\",\n      desc: \"CICD example code, Jenkins build and deploy\",\n      href: \"../cicd.html\",\n      github: \"../comingsoon.html\",\n      image: {\n          desc: \"Continuous Integration Continuous Deployment examples\", \n          src: \"images/IMG_0117.JPG\"\n         \n     } \n  },\n  {\n      title: \"Front End\",\n      key: \"frontend\",\n      desc: \"Front end example code\",\n      href: \"../codesample.html\",\n      github: \"https://github.com/jcook05/serverlessportfolio\",\n      image: {\n          desc: \"Front End examples\", \n          src: \"images/marmot.JPG\"\n         \n     } \n  }\n  \n  \n  \n  ]\n  \n \n  if (document.getElementById('example-work'))\n  {\n  ReactDOM.render(<ExampleWork work={MyWork}/>, document.getElementById('example-work'));\n  }\n  \n  else if (document.getElementById('test-work'))\n  {\n  ReactDOM.render(<CodeSample />, document.getElementById('test-work'));\n  }"
}];
var cmsample = [{
  title: "Ansible System Task",
  code: "---\n\n       # Create Jenkins group needed since not installing Jenkins \n       - name: Jenkins shell Group\n         group: name=jenkins gid=4949 state=present\n       \n       # Create Jenkins User\n       - name: Jenkins shell User\n         user: name=jenkins comment=\"Jenkins Continuous Build server\" home=/var/lib/jenkins shell=/bin/bash uid=2222 group=jenkins groups=jenkins state=present\n       \n       \n       - name: Install Packages\n         apt: name={{item}} state=latest\n         ignore_errors: True\n         with_items:\n           - git\n           - unzip\n           - python-setuptools\n           - python-dev\n           - build-essential\n           - python-pip\n           - openssl\n           - mini-httpd\n           - nginx\n           - memcached\n           - lftp\n           - asciidoc\n           - ansible\n           - docker.io\n           - libunwind8\n            \n       \n       - name: Install Additional Development tools. \n         apt: name={{item}} state=latest \n         ignore_errors: True\n         with_items:\n           - php\n           - php-cli\n           - php-mysql\n           - php-pdo\n           - php-gd\n           - php-imap\n           - php-mbstring\n           - autoconf\n           - automake\n           - nodejs-legacy\n           - npm\n          \n       \n       - name: sudo yum remove java-1.7.0-openjdk\n         apt: name={{item}} state=removed \n         with_items:\n           - java-1.7.0-openjdk\n       \n       \n       - name: ensure required packages are installed for Java 8\n         apt: name={{item}} state=latest update_cache=yes\n         with_items:\n           - python-software-properties\n       \n       - name: Add Java repository to sources\n         action: apt_repository repo='ppa:webupd8team/java'\n       \n       - name: Autoaccept license for Java\n         action: shell echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\n       \n       - name: Update APT package cache\n         action: apt update_cache=yes\n       \n       - name: Install Java 8\n         action: apt pkg=oracle-java8-installer state=latest install_recommends=yes\n       \n       - name: Set Java 8 Env\n         action: apt pkg=oracle-java8-set-default state=latest install_recommends=yes\n           \n       \n       - name:  Install boto3\n         command: pip install boto3\n       \n       - name:  Install cli53\n         command: pip install cli53\n       \n       \n       - name: Start Docker\n         service: name=docker state=started\n       \n       - name: Add Docker to jenkins group\n         command: usermod -aG docker jenkins\n       \n       - name:  Update pip\n         command:  pip install --upgrade pip\n         \n       - name: Create Jenkins Temp Dir\n         file: dest=/tmp/jenkins state=directory mode=0755 owner=root group=root\n       \n       - name: Create Jenkins .kube Dir for Kubernetes config\n         file: dest=/var/lib/jenkins/.kube state=directory mode=0755 owner=jenkins group=jenkins\n       \n       \n       - name: Get Jenkins Key\n         get_url: url=https://pkg.jenkins.io/debian-stable/jenkins.io.key dest=/tmp/jenkins.io.key owner=root group=root mode=0644\n       \n       - apt_key:\n           file: /tmp/jenkins.io.key\n           state: present\n       "
}, {
  title: "Docker - Jira ",
  code: "  FROM openjdk:8\n\n  # Configuration variables.\n  ENV JIRA_HOME     /var/atlassian/jira\n  ENV JIRA_INSTALL  /opt/atlassian/jira\n  ENV JIRA_VERSION  7.4.1\n  \n  # Install Atlassian JIRA and helper tools and setup initial home\n  # directory structure.\n  RUN set -x \\\n      && echo \"deb http://ftp.debian.org/debian jessie-backports main\" > /etc/apt/sources.list.d/jessie-backports.list \\\n      && apt-get update --quiet \\\n      && apt-get install --quiet --yes --no-install-recommends xmlstarlet \\\n      && apt-get install --quiet --yes --no-install-recommends -t jessie-backports libtcnative-1 \\\n      && apt-get clean \\\n      && mkdir -p                \"${JIRA_HOME}\" \\\n      && mkdir -p                \"${JIRA_HOME}/caches/indexes\" \\\n      && chmod -R 700            \"${JIRA_HOME}\" \\\n      && chown -R daemon:daemon  \"${JIRA_HOME}\" \\\n      && mkdir -p                \"${JIRA_INSTALL}/conf/Catalina\" \\\n      && curl -Ls                \"https://www.atlassian.com/software/jira/downloads/binary/atlassian-jira-core-${JIRA_VERSION}.tar.gz\" | \\\n      tar -xz --directory \"${JIRA_INSTALL}\" --strip-components=1 --no-same-owner \\\n      && curl -Ls                \"https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.38.tar.gz\" | tar -xz --directory \\\n      \"${JIRA_INSTALL}/lib\" --strip-components=1 --no-same-owner \"mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar\" \\\n      && rm -f                   \"${JIRA_INSTALL}/lib/postgresql-9.1-903.jdbc4-atlassian-hosted.jar\" \\\n      && curl -Ls                \"https://jdbc.postgresql.org/download/postgresql-9.4.1212.jar\" -o \"${JIRA_INSTALL}/lib/postgresql-9.4.1212.jar\" \\\n      && chmod -R 700            \"${JIRA_INSTALL}/conf\" \\\n      && chmod -R 700            \"${JIRA_INSTALL}/logs\" \\\n      && chmod -R 700            \"${JIRA_INSTALL}/temp\" \\\n      && chmod -R 700            \"${JIRA_INSTALL}/work\" \\\n      && chown -R daemon:daemon  \"${JIRA_INSTALL}/conf\" \\\n      && chown -R daemon:daemon  \"${JIRA_INSTALL}/logs\" \\\n      && chown -R daemon:daemon  \"${JIRA_INSTALL}/temp\" \\\n      && chown -R daemon:daemon  \"${JIRA_INSTALL}/work\" \\\n      && sed --in-place          \"s/java version/openjdk version/g\" \"${JIRA_INSTALL}/bin/check-java.sh\" \\\n      && echo -e                 \"\njira.home=$JIRA_HOME\" >> \"${JIRA_INSTALL}/atlassian-jira/WEB-INF/classes/jira-application.properties\" \\\n      && touch -d \"@0\"           \"${JIRA_INSTALL}/conf/server.xml\"\n  \n  \n  #COPY ./JiraHome/jira /opt/atlassian/jira\n  \n  # Use the default unprivileged account. This could be considered bad practice\n  # on systems where multiple processes end up being executed by 'daemon' but\n  # here we only ever run one process anyway.\n  USER daemon:daemon\n  \n  # Expose default HTTP connector port.\n  EXPOSE 8080\n  \n  \n  \n  \n  # Set volume mount points for installation and home directory. Changes to the\n  # home directory needs to be persisted as well as parts of the installation\n  # directory due to eg. logs.\n  VOLUME [\"/var/atlassian/jira\", \"/opt/atlassian/jira/logs\"]\n  \n  # Set the default working directory as the installation directory.\n  WORKDIR /var/atlassian/jira\n  \n  #COPY \"docker-entrypoint.sh\" \"/\"\n  #ENTRYPOINT [\"/docker-entrypoint.sh\"]\n  \n  # Run Atlassian JIRA as a foreground process by default.\n  CMD [\"/opt/atlassian/jira/bin/catalina.sh\", \"run\"]\n  \n  ## To Run\n  #docker run --detach --publish 8080:8080 -v ./JiraHome:/var/atlassian/jira jira:latest"
}];
var cicdsample = [{
  title: "DSL Jobs Plugin",
  code: "// Will generate a job based on DevTemplate for each item in the apps array\n       def apps = [  \"WeatherService\": \n                   [ \"repos\": [\"git@bitbucket.org:managedcicd/weathermsbuild.git\", '$BRANCH'],\n                    \"name\":\"WeatherService\",\n                    \"description\":\"prototype dotnet service\",\n                    \"authtoken\":\"buildit\",\n                    \"imagename\":\"weather\",\n                    \"deploymentname\":\"weather\",\n                    \"baseimagepath\":\"managedcicd/dotnetservice\"\n                  ],\n                   \"fromscratch\":\n                   // Illustrates the proper syntax for a GitLabs project.\n                     [ \"repos\": [\"ssh://git@code.managedcicd.com:7999/GitLabsStandard/gitlabsproject.git\", '$BRANCH'],\n                     \"name\":\"fromscratch\",\n                     \"description\":\"test service desc\",\n                     \"authtoken\":\"buildit\",\n                     \"imagename\":\"fromscratch\",\n                  ],\n                   \"StandardService\":\n                     [ \"repos\": [\"git@bitbucket.org:managedcicd/standardservice.git\", '$BRANCH'],\n                     \"name\":\"StandardService\",\n                     \"description\":\"Standard Lightweight Microservice\",\n                     \"authtoken\":\"buildit\",\n                     \"imagename\":\"standardservice\",\n                     \"deploymentname\":\"standardservice\", \n                     \"baseimagepath\":\"managedcicd/standardservice\"\n                  ]\n       \n       \n                  ]\n       apps.values().each { app ->\n       \n       \n       // Loop through apps array\n       \n           def jobprefix\n           def jobname\n          \n           //if (\"${JobTemplate}\" == \"DevTemplate\")\n           //{\n           \n              jobprefix = \"Development\"\n             \n           //} else\n           //{\n             \n           //  jobprefix = \"Release\"\n             \n           //}\n         \n         /* Conditionally generate Job Name based on Selected Template */\n           \n         jobname = jobprefix + app.name\n         \n         job(jobname){\n           \n          // if (\"${JobTemplate}\" == \"DevTemplate\")\n          // {    \n              using 'DevTemplate'\n         \n          // } else\n          // {\n          //   using 'ReleaseTemplate'         \n          // }\n        description(app.description)\n        logRotator(10, -1, 1, -1)\n       \n         \n         scm {\n           git(app.repos.get(0),app.repos.get(1))\n         }\n           \n         \n           // Configure Slack  \n           \n          // configure {\n          //         it / 'publishers' / 'jenkins.plugins.slack.SlackNotifier'(plugin: \"slack@2.0.1\") {\n          //             teamDomain('myteam')\n          //             authToken('mytoken')\n          //             buildServerUrl('http://mydomain:8080/')\n          //             room('#my-room')\n          //             notifyUnstable(true)\n          //             notifyFailure(true)\n          //             notifyBackToNormal(true)\n          //             includeTestSummary(true)\n          //             commitInfoChoice('AUTHORS_AND_TITLES')\n          //         }\n          //     }\n       \n       \n        configure { node ->  \n           node / 'scm' / 'extensions' << 'hudson.plugins.git.extensions.impl.UserExclusion' {\n             excludedUsers 'Jenkins User'\n           }\n         }\n         \n        authenticationToken(app.authtoken)\n       \n        configure { project ->  \n           project / 'triggers' << 'hudson.triggers.SCMTrigger' {\n             spec ('H/5 * * * *')\n             ignorePostCommitHooks 'false' \n           }\n         }\n       \n         parameters {\n          \n           stringParam(\"imagename\",app.imagename,\"Kubernetes image name\")\n           stringParam(\"deploymentname\",app.deploymentname,\"Kuberetes deploy name\")\n           stringParam(\"baseimagepath\",app.baseimagepath,\"Base path of image, for example managedcicd/dotnetservice for DockerHub repository or server/group/service for GitLabs\")\n             \n         }\n       \n         steps {\n               shell(readFileFromWorkspace('buildscripts/dotnetbuild'))\n               shell(readFileFromWorkspace('buildscripts/dockerbuildpush'))   \n         }\n       \n       \n       \n         }\n       }"
}, {
  title: "Serverless Lambda Deploy",
  code: "  import boto3\n  import os\n  from botocore.client import Config\n  import zipfile\n  import StringIO\n  import mimetypes\n  \n  \n  def lambda_handler(event, context):\n      \n      sns = boto3.resource('sns')\n      topic = sns.Topic(os.environ['SNS_TOPIC'])\n      \n      try:\n          s3 = boto3.resource('s3', config=Config(signature_version='s3v4'))\n      \n          build_bucket = s3.Bucket(os.environ['BUILD_BUCKET'])\n          portfolio_bucket = s3.Bucket(os.environ['PORTFOLIO_BUCKET'])\n      \n          ## Can use the /tmp folder when running Lambda functions\n          portfolio_zip = StringIO.StringIO()\n          \n          build_bucket.download_fileobj('jbcportfolio.zip', portfolio_zip)\n         \n      \n          with zipfile.ZipFile(portfolio_zip) as myzip:\n              for nm in myzip.namelist():\n                  obj = myzip.open(nm)\n                  print(obj)\n                  portfolio_bucket.upload_fileobj(obj, nm, ExtraArgs={'ContentType': mimetypes.guess_type(nm)[0]})\n                  portfolio_bucket.Object(nm).Acl().put(ACL='public-read')\n      \n          topic.publish(Subject=\"Portfolio Deployed\", Message=\"Deployment successful via Lambda.\")\n      except: \n          topic.publish(Subject=\"Portfolio Deploy Failed\", Message=\"Deployment failed.\")\n          raise\n      return 'Hello from Lambda'"
}];
var awssample = [{
  title: "Python AWS EC2 Library",
  code: " \"\"\"Method to get all VPCs\"\"\"\n       def get_vpcs(self, profile):\n   \n           session = boto3.Session(profile_name=profile)\n           ec2 = boto3.resource(\"ec2\", region_name=\"us-west-2\")\n                    \n           my_vpcs = ec2.vpcs.all()\n           return my_vpcs\n   \n   \n       \"\"\"Method to describe VPCs\"\"\"\n       def describe_vpcs(self,profile):\n   \n           session = boto3.Session(profile_name=profile)\n           ec2 = session.client('ec2')\n           \n           \n           my_vpcs = ec2.describe_vpcs()\n           return my_vpcs\n   \n   \n       \"\"\" Method to create a VPC with the default tenancy\"\"\"\n       def create_vpc(self, cidr, profile):\n   \n           session = boto3.Session(profile_name=profile)\n           ec2 = session.client('ec2')\n   \n           vpc = ec2.create_vpc(\n           CidrBlock=cidr,\n           AmazonProvidedIpv6CidrBlock=False,\n           DryRun=False,\n           InstanceTenancy='default'\n           )\n   \n       \"\"\"Method to get images by filters\"\"\"\n       def get_imagesbyfilter(self, filters, profile):\n           \n   \n           session = boto3.Session(profile_name=profile)\n           boto3conn = session.resource(\"ec2\", region_name=\"us-west-2\")\n                     \n           my_images = boto3conn.images.filter(Owners=['self'], Filters=filters)\n           return my_images\n       \n       \"\"\"Method to get images by filters\"\"\"\n       def get_imagesbyprofile(self, filters, profile):\n           \n           session = boto3.Session(profile_name=profile)\n   \n           boto3conn = session.resource(\"ec2\", region_name=\"us-west-2\")\n               \n           \n           my_images = boto3conn.images.filter(Owners=['self'], Filters=filters)\n           return my_images\n   \n       \"\"\"Boto3 Method to get images by filters\"\"\"\n       def get_instancesbyfilter(self, filters, profile):\n   \n           session = boto3.Session(profile_name=profile)\n           boto3conn = session.resource(\"ec2\", region_name=\"us-west-2\")\n             \n           \n           instances = boto3conn.instances.filter(Filters=filters)\n           return instances\n   \n       \n       def get_instancesbyprofile(self, filters, profile):\n   \n   \n           session = boto3.Session(profile_name=profile)\n   \n           boto3conn = session.resource(\"ec2\", region_name=\"us-west-2\")\n                       \n           instances = boto3conn.instances.filter(Filters=filters)\n           return instances\n   "
}, {
  title: "Python AWS S3 Library",
  code: "  from fabric.api import run,env, put, get, local, settings\n  from os import path\n  import time\n  from fabric.colors import green as _green, yellow as _yellow\n  import boto\n  import boto.ec2\n  import boto.ec2.autoscale\n  import boto3\n  from pprint import pprint\n  from botocore.exceptions import ClientError\n  from mimetypes import MimeTypes\n  \n  \n  class AwsS3Utilities:\n      \n\n      \"\"\"Method to upload file to an S3 bucket\"\"\"\n      def uploadfile(self, filepath, filename, bucket):\n          ## Setup boto3 client with route53\n          \n          s3 = boto3.resource('s3')\n          bucket = s3.Bucket(bucket)\n          bucket.upload_file(filepath, filename)\n  \n      \"\"\"Method to set existing object ACL to public-read\"\"\"\n      def setACLread(self, bucket, key):\n          s3 = boto3.resource('s3')\n           \n          s3.ObjectAcl(bucket, key).put(ACL='public-read')\n  \n      \"\"\"Method to put an object with a public read ACL.\"\"\"\n      def put_pub_object(self, filepath, filename, bucket):\n  \n          s3 = boto3.resource('s3')\n  \n  \n          print (\"Uploading file \" + filepath + ' to ' + filename)\n          try:                 \n              data = open(filepath, 'rb')\n              ftype, encoding = MimeTypes().guess_type(filepath)\n              conType = ftype if ftype is not None else encoding if encoding is not None else 'text/plain'    \n              s3.Object(bucket, filename).put(Body=data,ContentType=conType,ACL='public-read')\n          except ClientError as err:\n              print(\"Failed to upload artefact to S3.\n\" + str(err))\n              return False\n          except IOError as err:\n              print(\"Failed to access artefact in this directory.\n\" + str(err))\n              return False   \n          return True\n  \n      \"\"\"Method to put an object with a private read ACL.\"\"\"\n      def put_private_object(self, filepath, filename, bucket):\n  \n          s3 = boto3.resource('s3')\n  \n  \n          print (\"Uploading file \" + filepath + ' to ' + filename)\n          try:                 \n              data = open(filepath, 'rb')\n              ftype, encoding = MimeTypes().guess_type(filepath)\n              conType = ftype if ftype is not None else encoding if encoding is not None else 'text/plain'    \n              s3.Object(bucket, filename).put(Body=data,ContentType=conType,ACL='private')\n          except ClientError as err:\n              print(\"Failed to upload artefact to S3.\n\" + str(err))\n              return False\n          except IOError as err:\n              print(\"Failed to access artefact in this directory.\n\" + str(err))\n              return False   \n          return True\n  \n      \"\"\"Method to put an object with a public read ACL.\"\"\"\n      def get_object(self, targetdir, filename, bucket):\n  \n          s3 = boto3.resource('s3')\n  \n  \n          print (\"Downloading file \" + filename + ' to ' + targetdir)\n          try:                 \n             \n              newfile = targetdir + filename\n              s3.Bucket('mybucket').download_file(filename, newfile)    \n              ##s3.Object(bucket, filename).get()\n          except ClientError as err:\n              print(\"Failed to download artifact from S3.\n\" + str(err))\n              return False\n          \n          return True"
}];
var slssample = [{
  title: "NodeJS Serverless",
  code: "'use strict'\n       const querystring = require('querystring')\n       \n       \n       function generator(min, max) {\n       \n         // return whole number Math.floor rounds\n         return Math.floor(Math.random() * (max - min) + min);\n       }\n       \n       \n       function RandomWeather(lat, long, days) {\n       \n         // Conditions Array\n       \n         var conditions = [\"Sunny\",\"Mostly Sunny\",\"Partly Sunny\",\"Partly Cloudy\",\"Mostly Cloudy\",\"Rain\"];\n         \n         // Forecast Array\n         var forecast = new Array()\n       \n         console.log(\"Modal to review questions and edit or submit\")\n         console.log(lat)\n         console.log(long)\n         \n         var obj = new Object();\n       \n         \n         var test = generator(0, (conditions.length - 1))\n         console.log(test)\n       \n         for (var i = 1; i < days; i++) {\n       \n           obj.HiTemperature = generator(40, 100);\n           obj.LoTemperature = generator(0, obj.HiTemperature);\n           obj.AverageWindSpeed = generator(0, 45);\n           obj.Conditions = conditions[generator(0, (conditions.length - 1))];\n          \n         var jsonString = JSON.stringify(obj);    \n       \n         forecast.push(obj)\n       \n       \n       \n         }\n         \n       \n         console.log(forecast.length)\n         console.log(forecast[0].HiTemperature)\n         console.log(forecast[0].LoTemperature)\n         console.log(forecast[0].AverageWindSpeed)\n         console.log(forecast[0].Conditions)\n         console.log(jsonString)\n        \n         var newstring = JSON.stringify(forecast)\n       \n         console.log(newstring)\n       \n       \n         return forecast;\n         \n         \n       }\n       \n       var NewWeather = RandomWeather(35.5, 40.75, 6)\n       \n       module.exports.weather = (event, context, callback) => {\n       \n         var latitude = querystring.parse(event.body).lat\n         var longitude = querystring.parse(event.body).long\n       \n         var WeatherReport = RandomWeather(latitude, longitude, 6)\n       \n         var jsonString = JSON.stringify(WeatherReport, null, 4);   \n       \n         const response = {\n           statusCode: 200,\n           body: jsonString,\n         };\n       \n         callback(null, response);\n       \n         // Use this code if you don't use the http event with the LAMBDA-PROXY integration\n         // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });\n       };\n"
}, {
  title: "NodeJS Serverless yml",
  code: "service: nodejsweather # NOTE: update this with your service name\n        \n    provider:\n      name: aws\n      region: us-west-2\n      runtime: nodejs6.10\n        \n    functions:\n      weather:\n        handler: handler.weather\n    \n    #Setting up the APIGateWay end point\n        events:\n          - http:\n              path: /\n              method: get\n"
}];

var CodeSample =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CodeSample, _React$Component);

  function CodeSample(props) {
    var _this;

    _classCallCheck(this, CodeSample);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeSample).call(this, props)); //console.log(window.location.search);

    _this.querystring = window.location.search;
    _this.key = _this.querystring.substring(1); //console.log(this.key)

    _this.state = {
      'codeType': _this.key //console.log(this.state.codeType);

    };
    _this.stateSet = _this.stateSet.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CodeSample, [{
    key: "stateSet",
    value: function stateSet(codetype) {
      // set state = open
      // set example
      this.setState({
        'codeType': codetype
      });
    }
  }, {
    key: "render",
    value: function render() {
      var items = [];
      console.log(this.state.codeType);

      if (this.state.codeType == "frontend") {
        console.log("frontendfound");
        items = reactsample;
      }

      if (this.state.codeType == "cm") {
        console.log("cmfound");
        items = cmsample;
      }

      if (this.state.codeType == "cicd") {
        console.log("cicdfound");
        items = cicdsample;
      }

      if (this.state.codeType == "aws") {
        console.log("awsfound");
        items = awssample;
      }

      if (this.state.codeType == "serverless") {
        console.log("serverless");
        items = slssample;
      }

      return _react["default"].createElement("section", {
        className: "section__exampleWrapper"
      }, _react["default"].createElement("table", null, _react["default"].createElement("tbody", null, _react["default"].createElement("tr", null, items.map(function (item) {
        return _react["default"].createElement(TColumn, {
          data: item,
          key: item.title
        });
      })))));
    }
  }]);

  return CodeSample;
}(_react["default"].Component);

;

var TColumn = function TColumn(props) {
  return _react["default"].createElement("td", null, _react["default"].createElement("section", {
    className: "window"
  }, _react["default"].createElement("label", null, props.data.title), _react["default"].createElement("pre", null, props.data.code)), " ");
};

var _default = CodeSample;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,